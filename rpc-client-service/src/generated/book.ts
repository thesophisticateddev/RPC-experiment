// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v4.25.3
// source: book.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "book";

export interface BookItem {
  title: string;
  author: string;
  price: number;
}

export interface BookRequest {
  title: string;
}

export interface AddBookRequest {
  title: string;
  author: string;
  price: number;
}

export interface BookResponse {
  books: BookItem[];
}

function createBaseBookItem(): BookItem {
  return { title: "", author: "", price: 0 };
}

export const BookItem = {
  encode(message: BookItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.author !== "") {
      writer.uint32(18).string(message.author);
    }
    if (message.price !== 0) {
      writer.uint32(24).int32(message.price);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BookItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.author = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.price = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BookItem {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      author: isSet(object.author) ? globalThis.String(object.author) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
    };
  },

  toJSON(message: BookItem): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.author !== "") {
      obj.author = message.author;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BookItem>, I>>(base?: I): BookItem {
    return BookItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BookItem>, I>>(object: I): BookItem {
    const message = createBaseBookItem();
    message.title = object.title ?? "";
    message.author = object.author ?? "";
    message.price = object.price ?? 0;
    return message;
  },
};

function createBaseBookRequest(): BookRequest {
  return { title: "" };
}

export const BookRequest = {
  encode(message: BookRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BookRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BookRequest {
    return { title: isSet(object.title) ? globalThis.String(object.title) : "" };
  },

  toJSON(message: BookRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BookRequest>, I>>(base?: I): BookRequest {
    return BookRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BookRequest>, I>>(object: I): BookRequest {
    const message = createBaseBookRequest();
    message.title = object.title ?? "";
    return message;
  },
};

function createBaseAddBookRequest(): AddBookRequest {
  return { title: "", author: "", price: 0 };
}

export const AddBookRequest = {
  encode(message: AddBookRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.author !== "") {
      writer.uint32(18).string(message.author);
    }
    if (message.price !== 0) {
      writer.uint32(24).int32(message.price);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddBookRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.author = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.price = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddBookRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      author: isSet(object.author) ? globalThis.String(object.author) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
    };
  },

  toJSON(message: AddBookRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.author !== "") {
      obj.author = message.author;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddBookRequest>, I>>(base?: I): AddBookRequest {
    return AddBookRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddBookRequest>, I>>(object: I): AddBookRequest {
    const message = createBaseAddBookRequest();
    message.title = object.title ?? "";
    message.author = object.author ?? "";
    message.price = object.price ?? 0;
    return message;
  },
};

function createBaseBookResponse(): BookResponse {
  return { books: [] };
}

export const BookResponse = {
  encode(message: BookResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.books) {
      BookItem.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BookResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.books.push(BookItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BookResponse {
    return { books: globalThis.Array.isArray(object?.books) ? object.books.map((e: any) => BookItem.fromJSON(e)) : [] };
  },

  toJSON(message: BookResponse): unknown {
    const obj: any = {};
    if (message.books?.length) {
      obj.books = message.books.map((e) => BookItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BookResponse>, I>>(base?: I): BookResponse {
    return BookResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BookResponse>, I>>(object: I): BookResponse {
    const message = createBaseBookResponse();
    message.books = object.books?.map((e) => BookItem.fromPartial(e)) || [];
    return message;
  },
};

export interface Book {
  GetBook(request: BookRequest): Promise<BookResponse>;
  AddBook(request: AddBookRequest): Promise<BookResponse>;
}

export const BookServiceName = "book.Book";
export class BookClientImpl implements Book {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || BookServiceName;
    this.rpc = rpc;
    this.GetBook = this.GetBook.bind(this);
    this.AddBook = this.AddBook.bind(this);
  }
  GetBook(request: BookRequest): Promise<BookResponse> {
    const data = BookRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBook", data);
    return promise.then((data) => BookResponse.decode(_m0.Reader.create(data)));
  }

  AddBook(request: AddBookRequest): Promise<BookResponse> {
    const data = AddBookRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddBook", data);
    return promise.then((data) => BookResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
