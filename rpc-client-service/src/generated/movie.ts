// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v4.25.3
// source: movie.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "movie";

export interface MovieItem {
  id: number;
  title: string;
  year: number;
  genre: string;
  rating: string;
  starRating: string;
  runtime: string;
  cast: string;
  image: string;
}

export interface MovieRequest {
}

export interface MovieResponse {
  movies: MovieItem[];
}

function createBaseMovieItem(): MovieItem {
  return { id: 0, title: "", year: 0, genre: "", rating: "", starRating: "", runtime: "", cast: "", image: "" };
}

export const MovieItem = {
  encode(message: MovieItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.year !== 0) {
      writer.uint32(24).int32(message.year);
    }
    if (message.genre !== "") {
      writer.uint32(34).string(message.genre);
    }
    if (message.rating !== "") {
      writer.uint32(42).string(message.rating);
    }
    if (message.starRating !== "") {
      writer.uint32(50).string(message.starRating);
    }
    if (message.runtime !== "") {
      writer.uint32(58).string(message.runtime);
    }
    if (message.cast !== "") {
      writer.uint32(66).string(message.cast);
    }
    if (message.image !== "") {
      writer.uint32(74).string(message.image);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MovieItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMovieItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.year = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.genre = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.rating = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.starRating = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.runtime = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.cast = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.image = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MovieItem {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      year: isSet(object.year) ? globalThis.Number(object.year) : 0,
      genre: isSet(object.genre) ? globalThis.String(object.genre) : "",
      rating: isSet(object.rating) ? globalThis.String(object.rating) : "",
      starRating: isSet(object.starRating) ? globalThis.String(object.starRating) : "",
      runtime: isSet(object.runtime) ? globalThis.String(object.runtime) : "",
      cast: isSet(object.cast) ? globalThis.String(object.cast) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
    };
  },

  toJSON(message: MovieItem): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.year !== 0) {
      obj.year = Math.round(message.year);
    }
    if (message.genre !== "") {
      obj.genre = message.genre;
    }
    if (message.rating !== "") {
      obj.rating = message.rating;
    }
    if (message.starRating !== "") {
      obj.starRating = message.starRating;
    }
    if (message.runtime !== "") {
      obj.runtime = message.runtime;
    }
    if (message.cast !== "") {
      obj.cast = message.cast;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MovieItem>, I>>(base?: I): MovieItem {
    return MovieItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MovieItem>, I>>(object: I): MovieItem {
    const message = createBaseMovieItem();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.year = object.year ?? 0;
    message.genre = object.genre ?? "";
    message.rating = object.rating ?? "";
    message.starRating = object.starRating ?? "";
    message.runtime = object.runtime ?? "";
    message.cast = object.cast ?? "";
    message.image = object.image ?? "";
    return message;
  },
};

function createBaseMovieRequest(): MovieRequest {
  return {};
}

export const MovieRequest = {
  encode(_: MovieRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MovieRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMovieRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MovieRequest {
    return {};
  },

  toJSON(_: MovieRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MovieRequest>, I>>(base?: I): MovieRequest {
    return MovieRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MovieRequest>, I>>(_: I): MovieRequest {
    const message = createBaseMovieRequest();
    return message;
  },
};

function createBaseMovieResponse(): MovieResponse {
  return { movies: [] };
}

export const MovieResponse = {
  encode(message: MovieResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.movies) {
      MovieItem.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MovieResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMovieResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.movies.push(MovieItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MovieResponse {
    return {
      movies: globalThis.Array.isArray(object?.movies) ? object.movies.map((e: any) => MovieItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: MovieResponse): unknown {
    const obj: any = {};
    if (message.movies?.length) {
      obj.movies = message.movies.map((e) => MovieItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MovieResponse>, I>>(base?: I): MovieResponse {
    return MovieResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MovieResponse>, I>>(object: I): MovieResponse {
    const message = createBaseMovieResponse();
    message.movies = object.movies?.map((e) => MovieItem.fromPartial(e)) || [];
    return message;
  },
};

export interface Movie {
  GetMovies(request: MovieRequest): Promise<MovieResponse>;
}

export const MovieServiceName = "movie.Movie";
export class MovieClientImpl implements Movie {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MovieServiceName;
    this.rpc = rpc;
    this.GetMovies = this.GetMovies.bind(this);
  }
  GetMovies(request: MovieRequest): Promise<MovieResponse> {
    const data = MovieRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetMovies", data);
    return promise.then((data) => MovieResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
